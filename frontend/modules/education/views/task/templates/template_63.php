<?php
use yii\helpers\Url;
?>
<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Добавление новой записи (контакта) в телефонную книгу.</title>
    <link rel="stylesheet" href="/education/css/template/style.css">
    <link rel="stylesheet" href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.5.1/build/styles/default.min.css">
    <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.5.1/build/highlight.min.js"></script>
    <style>

    </style>
</head>
<body>
<a href="<?= Url::to(['/education/task/view', 'id' => 2])?>">
    <button>Назад к списоку примеров</button>
</a><br>
<!-- *** Описательный текст к заданию *** -->
<div>
    <p>
        Следуя отмеченным особенностям, был разработан один из мощнейших механизмов проверки строк на соответствие некоторому шаблону — регулярные выражения (Regular Expressions, RegExp).
    </p>
    <p>
        В терминологии регулярных выражения часто используются слова «<b>шаблон</b>» и «<b>маска</b>».
    </p>
    <p>
        Слово «маска» заимствовано у системного программирования, в котором популярен термин «<b>битовая маска</b>». Он означает проверку значений отдельных бит числа, например, являются ли два последних бита числа единичными.
    </p>
        Термин «<b>шаблон</b>» пришел из проектирования и означает некоторый образец, которому должен соответствовать объект.
    </p>
    <p>
        В области регулярных выражений эти два термина означают одно и то же. Аналогия с масками удобна, когда выражение требует: «строка должна заканчиваться на цифру», а с шаблонами, если «строка не должна содержать пробелов».
    </p>
    <p>
        Как уже упоминалось выше, основными способами использования регулярных выражений в JavaScript являются:
        <ul>
            <li>проверка строки на соответствие шаблону;</li>
            <li>разделение строки на части по шаблону;</li>
            <li>преобразование строки по шаблону (или замена по шаблону).</li>
        </ul>
    </p>
    <p>
        Шаблон регулярного выражения в JavaScript можно создать двумя способами — литералом и конструктором. Литерал представляет собой выражение вида «<b>/шаблон/флаги</b>». Литерал не берется в кавычки, признаком его начала служит прямой слеш («<b>/</b>»). Литеральное выражение может быть использовано самостоятельно либо сохранено в переменной:
        <br><br>
        Смысл термина «<b>флаг</b>» означает некоторые дополнительные условия, при которых строка сравнивается с шаблоном. Например, считать ли одинаковыми большие и маленькие буквы одного алфавита (<b>«а» и «А»</b>).
    </p>
    <p>
        В приведенном примере шаблоном является выражение «\D», флаги не указаны.
    </p>
<pre>
    <code class="hljs language-html">
var template1 = /\D/
    </code>
</pre>
    <p>
        При помощи конструктора регулярное выражение может быть создано инструкцией
    </p>
</div>
<pre>
    <code class="hljs language-html">
new RegExp("шаблон","флаги")
    </code>
</pre>
<p>
    В таком случае и шаблон, и флаги берутся в кавычки, слеши-ограничители шаблона не нужны. Точно так же созданный шаблон может быть сохранен в переменной:
</p>
<pre>
    <code class="hljs language-html">
var template2 = new RegExp("\D","g").
    </code>
</pre>
    <p>
        Начнем с рассмотрения первого способа. Проверка строки на соответствие шаблону обеспечивается методом «<b>test</b>» регулярного выражения. В качестве аргумента в метод передается сама строка, которую нужно проверить.
        <br><br>
        Результатом работы метода «test» является логическое значение (true или false), информирующее о положительном или отрицательном результате проверки.
    </p>
    <p>
        Завершая обзор основных правил построения регулярных выражений отметим, что некоторые символы в них играют особую роль, указывая спецзнаки, группы, якоря и т.п. Для того чтобы включать подобные символы в шаблоны, подразумевая сами символы, а не их специальное назначение, их необходимо «<b>экранировать</b>» — добавлять обратный слеш «<b>\</b>» перед ними. Символы, которые необходимо экранировать следующие:
    </p>
<pre>
    <code class="hljs language-html">
^ $ [ ] ( ) { } . * + ? < > | \
    </code>
</pre>
<hr>
<!-- *** Область примера *** -->

<script>
    // Начнем с рассмотрения первого способа. Проверка строки на соответствие шаблону обеспечивается методом «test» регулярного выражения.
    // let template1 = /\D/;
    // str = "2dfd";
    //
    // if( template1.test(str) ) {
    //     alert("test passed");
    // }
    // else
    // {
    //     alert("test failed");
    // }
</script>
<script>hljs.highlightAll();</script>
</body>
</html>
